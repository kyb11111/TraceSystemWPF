//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.225
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace TraceSystemWPF.Proxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModelBase", Namespace="http://schemas.datacontract.org/2004/07/SuperControl.ServiceModel")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.TraceModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.TraceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.UserInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.ProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.Product))]
    public partial class ModelBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int RidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Rid {
            get {
                return this.RidField;
            }
            set {
                if ((this.RidField.Equals(value) != true)) {
                    this.RidField = value;
                    this.RaisePropertyChanged("Rid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TraceModel", Namespace="http://schemas.datacontract.org/2004/07/SuperControl.TraceServerModel")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.TraceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.UserInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.ProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.Product))]
    public partial class TraceModel : TraceSystemWPF.Proxy.ModelBase {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TraceInfo", Namespace="http://schemas.datacontract.org/2004/07/SuperControl.TraceServerModel")]
    [System.SerializableAttribute()]
    public partial class TraceInfo : TraceSystemWPF.Proxy.TraceModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PicInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PicInfo {
            get {
                return this.PicInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.PicInfoField, value) != true)) {
                    this.PicInfoField = value;
                    this.RaisePropertyChanged("PicInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Product {
            get {
                return this.ProductField;
            }
            set {
                if ((this.ProductField.Equals(value) != true)) {
                    this.ProductField = value;
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TextInfo {
            get {
                return this.TextInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.TextInfoField, value) != true)) {
                    this.TextInfoField = value;
                    this.RaisePropertyChanged("TextInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/SuperControl.TraceServerModel")]
    [System.SerializableAttribute()]
    public partial class UserInfo : TraceSystemWPF.Proxy.TraceModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassWordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PassWord {
            get {
                return this.PassWordField;
            }
            set {
                if ((object.ReferenceEquals(this.PassWordField, value) != true)) {
                    this.PassWordField = value;
                    this.RaisePropertyChanged("PassWord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserType {
            get {
                return this.UserTypeField;
            }
            set {
                if ((this.UserTypeField.Equals(value) != true)) {
                    this.UserTypeField = value;
                    this.RaisePropertyChanged("UserType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductType", Namespace="http://schemas.datacontract.org/2004/07/SuperControl.TraceServerModel")]
    [System.SerializableAttribute()]
    public partial class ProductType : TraceSystemWPF.Proxy.TraceModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/SuperControl.TraceServerModel")]
    [System.SerializableAttribute()]
    public partial class Product : TraceSystemWPF.Proxy.TraceModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RemarkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((this.ProductTypeField.Equals(value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserInfo {
            get {
                return this.UserInfoField;
            }
            set {
                if ((this.UserInfoField.Equals(value) != true)) {
                    this.UserInfoField = value;
                    this.RaisePropertyChanged("UserInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExcuteAction", Namespace="http://schemas.datacontract.org/2004/07/SuperControl.ServiceModel")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.TraceModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.TraceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.UserInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.ProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.Product))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.ModelBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.ExcuteType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.RegisteItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.RealtimeData>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.RealtimeData))]
    public partial class ExcuteAction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object ExcuteObjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TraceSystemWPF.Proxy.ExcuteType ExcuteTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object ExcuteObject {
            get {
                return this.ExcuteObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ExcuteObjectField, value) != true)) {
                    this.ExcuteObjectField = value;
                    this.RaisePropertyChanged("ExcuteObject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TraceSystemWPF.Proxy.ExcuteType ExcuteType {
            get {
                return this.ExcuteTypeField;
            }
            set {
                if ((this.ExcuteTypeField.Equals(value) != true)) {
                    this.ExcuteTypeField = value;
                    this.RaisePropertyChanged("ExcuteType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExcuteType", Namespace="http://schemas.datacontract.org/2004/07/SuperControl.ServiceModel")]
    public enum ExcuteType : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Insert = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Update = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CacheSave = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CacheRemove = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Registe = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unregiste = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GetLog = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Append = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Select = 16,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegisteItem", Namespace="http://schemas.datacontract.org/2004/07/SuperControl.ServiceModel")]
    [System.SerializableAttribute()]
    public partial class RegisteItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AltKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RegOnlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RidField;
        
        private string TypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AltKey {
            get {
                return this.AltKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.AltKeyField, value) != true)) {
                    this.AltKeyField = value;
                    this.RaisePropertyChanged("AltKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RegOnly {
            get {
                return this.RegOnlyField;
            }
            set {
                if ((this.RegOnlyField.Equals(value) != true)) {
                    this.RegOnlyField = value;
                    this.RaisePropertyChanged("RegOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rid {
            get {
                return this.RidField;
            }
            set {
                if ((this.RidField.Equals(value) != true)) {
                    this.RidField = value;
                    this.RaisePropertyChanged("Rid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RealtimeData", Namespace="http://schemas.datacontract.org/2004/07/SuperControl.ServiceModel")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.TraceModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.TraceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.UserInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.ProductType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.Product))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.ModelBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.ExcuteAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.ExcuteType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TraceSystemWPF.Proxy.RegisteItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.RealtimeData>))]
    public partial class RealtimeData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<object> DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<object> Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rid {
            get {
                return this.RidField;
            }
            set {
                if ((this.RidField.Equals(value) != true)) {
                    this.RidField = value;
                    this.RaisePropertyChanged("Rid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proxy.ITraceService", CallbackContract=typeof(TraceSystemWPF.Proxy.ITraceServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ITraceService {
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ITraceService/GetServerTime", ReplyAction="http://tempuri.org/ITraceService/GetServerTimeResponse")]
        System.DateTime GetServerTime();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ITraceService/GetServerTime", ReplyAction="http://tempuri.org/ITraceService/GetServerTimeResponse")]
        System.IAsyncResult BeginGetServerTime(System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetServerTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ITraceService/DownloadTextFile", ReplyAction="http://tempuri.org/ITraceService/DownloadTextFileResponse")]
        bool DownloadTextFile(out byte[] fileContent, string path, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ITraceService/DownloadTextFile", ReplyAction="http://tempuri.org/ITraceService/DownloadTextFileResponse")]
        System.IAsyncResult BeginDownloadTextFile(string path, string fileName, System.AsyncCallback callback, object asyncState);
        
        bool EndDownloadTextFile(out byte[] fileContent, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ITraceService/UploadTextFile", ReplyAction="http://tempuri.org/ITraceService/UploadTextFileResponse")]
        bool UploadTextFile(string path, string fileName, byte[] fileContent);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ITraceService/UploadTextFile", ReplyAction="http://tempuri.org/ITraceService/UploadTextFileResponse")]
        System.IAsyncResult BeginUploadTextFile(string path, string fileName, byte[] fileContent, System.AsyncCallback callback, object asyncState);
        
        bool EndUploadTextFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ITraceService/DeleteFile", ReplyAction="http://tempuri.org/ITraceService/DeleteFileResponse")]
        bool DeleteFile(string path, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ITraceService/DeleteFile", ReplyAction="http://tempuri.org/ITraceService/DeleteFileResponse")]
        System.IAsyncResult BeginDeleteFile(string path, string fileName, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ITraceService/SaveQRCode", ReplyAction="http://tempuri.org/ITraceService/SaveQRCodeResponse")]
        bool SaveQRCode(string path, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ITraceService/SaveQRCode", ReplyAction="http://tempuri.org/ITraceService/SaveQRCodeResponse")]
        System.IAsyncResult BeginSaveQRCode(string path, string fileName, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveQRCode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITraceService/Verify")]
        void Verify(string userName, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ITraceService/Verify")]
        System.IAsyncResult BeginVerify(string userName, string verificationCode, System.AsyncCallback callback, object asyncState);
        
        void EndVerify(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ITraceService/GetClientChcheModelTypeName", ReplyAction="http://tempuri.org/ITraceService/GetClientChcheModelTypeNameResponse")]
        System.Collections.ObjectModel.ObservableCollection<string> GetClientChcheModelTypeName();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ITraceService/GetClientChcheModelTypeName", ReplyAction="http://tempuri.org/ITraceService/GetClientChcheModelTypeNameResponse")]
        System.IAsyncResult BeginGetClientChcheModelTypeName(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetClientChcheModelTypeName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ITraceService/GetListAll", ReplyAction="http://tempuri.org/ITraceService/GetListAllResponse")]
        System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> GetListAll(string modelType);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ITraceService/GetListAll", ReplyAction="http://tempuri.org/ITraceService/GetListAllResponse")]
        System.IAsyncResult BeginGetListAll(string modelType, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> EndGetListAll(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ITraceService/GetList", ReplyAction="http://tempuri.org/ITraceService/GetListResponse")]
        System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> GetList(string modelType, int startRid, int count);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ITraceService/GetList", ReplyAction="http://tempuri.org/ITraceService/GetListResponse")]
        System.IAsyncResult BeginGetList(string modelType, int startRid, int count, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> EndGetList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ITraceService/Excute", ReplyAction="http://tempuri.org/ITraceService/ExcuteResponse")]
        bool Excute(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction> actions);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ITraceService/Excute", ReplyAction="http://tempuri.org/ITraceService/ExcuteResponse")]
        System.IAsyncResult BeginExcute(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction> actions, System.AsyncCallback callback, object asyncState);
        
        bool EndExcute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ITraceService/InsertModel", ReplyAction="http://tempuri.org/ITraceService/InsertModelResponse")]
        int InsertModel(TraceSystemWPF.Proxy.ModelBase model);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/ITraceService/InsertModel", ReplyAction="http://tempuri.org/ITraceService/InsertModelResponse")]
        System.IAsyncResult BeginInsertModel(TraceSystemWPF.Proxy.ModelBase model, System.AsyncCallback callback, object asyncState);
        
        int EndInsertModel(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITraceServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITraceService/ExcuteNotify")]
        void ExcuteNotify(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction> actions);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ITraceService/ExcuteNotify")]
        System.IAsyncResult BeginExcuteNotify(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction> actions, System.AsyncCallback callback, object asyncState);
        
        void EndExcuteNotify(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITraceService/RealTimeNotify")]
        void RealTimeNotify(string modelType, System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.RealtimeData> data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ITraceService/RealTimeNotify")]
        System.IAsyncResult BeginRealTimeNotify(string modelType, System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.RealtimeData> data, System.AsyncCallback callback, object asyncState);
        
        void EndRealTimeNotify(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITraceService/ErrorNotify")]
        void ErrorNotify(string serviceName, string message, TraceSystemWPF.Proxy.ExcuteType type);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ITraceService/ErrorNotify")]
        System.IAsyncResult BeginErrorNotify(string serviceName, string message, TraceSystemWPF.Proxy.ExcuteType type, System.AsyncCallback callback, object asyncState);
        
        void EndErrorNotify(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITraceService/ping")]
        void ping();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ITraceService/ping")]
        System.IAsyncResult Beginping(System.AsyncCallback callback, object asyncState);
        
        void Endping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/ITraceService/CloseSession")]
        void CloseSession();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, AsyncPattern=true, Action="http://tempuri.org/ITraceService/CloseSession")]
        System.IAsyncResult BeginCloseSession(System.AsyncCallback callback, object asyncState);
        
        void EndCloseSession(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITraceServiceChannel : TraceSystemWPF.Proxy.ITraceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadTextFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadTextFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] fileContent {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadTextFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadTextFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveQRCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveQRCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientChcheModelTypeNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientChcheModelTypeNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetListAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetListAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExcuteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExcuteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TraceServiceClient : System.ServiceModel.DuplexClientBase<TraceSystemWPF.Proxy.ITraceService>, TraceSystemWPF.Proxy.ITraceService {
        
        private BeginOperationDelegate onBeginGetServerTimeDelegate;
        
        private EndOperationDelegate onEndGetServerTimeDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadTextFileDelegate;
        
        private EndOperationDelegate onEndDownloadTextFileDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadTextFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadTextFileDelegate;
        
        private EndOperationDelegate onEndUploadTextFileDelegate;
        
        private System.Threading.SendOrPostCallback onUploadTextFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFileDelegate;
        
        private EndOperationDelegate onEndDeleteFileDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveQRCodeDelegate;
        
        private EndOperationDelegate onEndSaveQRCodeDelegate;
        
        private System.Threading.SendOrPostCallback onSaveQRCodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginVerifyDelegate;
        
        private EndOperationDelegate onEndVerifyDelegate;
        
        private System.Threading.SendOrPostCallback onVerifyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetClientChcheModelTypeNameDelegate;
        
        private EndOperationDelegate onEndGetClientChcheModelTypeNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientChcheModelTypeNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetListAllDelegate;
        
        private EndOperationDelegate onEndGetListAllDelegate;
        
        private System.Threading.SendOrPostCallback onGetListAllCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetListDelegate;
        
        private EndOperationDelegate onEndGetListDelegate;
        
        private System.Threading.SendOrPostCallback onGetListCompletedDelegate;
        
        private BeginOperationDelegate onBeginExcuteDelegate;
        
        private EndOperationDelegate onEndExcuteDelegate;
        
        private System.Threading.SendOrPostCallback onExcuteCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertModelDelegate;
        
        private EndOperationDelegate onEndInsertModelDelegate;
        
        private System.Threading.SendOrPostCallback onInsertModelCompletedDelegate;
        
        public TraceServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TraceServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TraceServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TraceServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TraceServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetServerTimeCompletedEventArgs> GetServerTimeCompleted;
        
        public event System.EventHandler<DownloadTextFileCompletedEventArgs> DownloadTextFileCompleted;
        
        public event System.EventHandler<UploadTextFileCompletedEventArgs> UploadTextFileCompleted;
        
        public event System.EventHandler<DeleteFileCompletedEventArgs> DeleteFileCompleted;
        
        public event System.EventHandler<SaveQRCodeCompletedEventArgs> SaveQRCodeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> VerifyCompleted;
        
        public event System.EventHandler<GetClientChcheModelTypeNameCompletedEventArgs> GetClientChcheModelTypeNameCompleted;
        
        public event System.EventHandler<GetListAllCompletedEventArgs> GetListAllCompleted;
        
        public event System.EventHandler<GetListCompletedEventArgs> GetListCompleted;
        
        public event System.EventHandler<ExcuteCompletedEventArgs> ExcuteCompleted;
        
        public event System.EventHandler<InsertModelCompletedEventArgs> InsertModelCompleted;
        
        public System.DateTime GetServerTime() {
            return base.Channel.GetServerTime();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetServerTime(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerTime(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.DateTime EndGetServerTime(System.IAsyncResult result) {
            return base.Channel.EndGetServerTime(result);
        }
        
        private System.IAsyncResult OnBeginGetServerTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetServerTime(callback, asyncState);
        }
        
        private object[] OnEndGetServerTime(System.IAsyncResult result) {
            System.DateTime retVal = this.EndGetServerTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerTimeCompleted(object state) {
            if ((this.GetServerTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerTimeCompleted(this, new GetServerTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerTimeAsync() {
            this.GetServerTimeAsync(null);
        }
        
        public void GetServerTimeAsync(object userState) {
            if ((this.onBeginGetServerTimeDelegate == null)) {
                this.onBeginGetServerTimeDelegate = new BeginOperationDelegate(this.OnBeginGetServerTime);
            }
            if ((this.onEndGetServerTimeDelegate == null)) {
                this.onEndGetServerTimeDelegate = new EndOperationDelegate(this.OnEndGetServerTime);
            }
            if ((this.onGetServerTimeCompletedDelegate == null)) {
                this.onGetServerTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerTimeCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerTimeDelegate, null, this.onEndGetServerTimeDelegate, this.onGetServerTimeCompletedDelegate, userState);
        }
        
        public bool DownloadTextFile(out byte[] fileContent, string path, string fileName) {
            return base.Channel.DownloadTextFile(out fileContent, path, fileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDownloadTextFile(string path, string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadTextFile(path, fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDownloadTextFile(out byte[] fileContent, System.IAsyncResult result) {
            return base.Channel.EndDownloadTextFile(out fileContent, result);
        }
        
        private System.IAsyncResult OnBeginDownloadTextFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string path = ((string)(inValues[0]));
            string fileName = ((string)(inValues[1]));
            return this.BeginDownloadTextFile(path, fileName, callback, asyncState);
        }
        
        private object[] OnEndDownloadTextFile(System.IAsyncResult result) {
            byte[] fileContent = this.GetDefaultValueForInitialization<byte[]>();
            bool retVal = this.EndDownloadTextFile(out fileContent, result);
            return new object[] {
                    fileContent,
                    retVal};
        }
        
        private void OnDownloadTextFileCompleted(object state) {
            if ((this.DownloadTextFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadTextFileCompleted(this, new DownloadTextFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadTextFileAsync(string path, string fileName) {
            this.DownloadTextFileAsync(path, fileName, null);
        }
        
        public void DownloadTextFileAsync(string path, string fileName, object userState) {
            if ((this.onBeginDownloadTextFileDelegate == null)) {
                this.onBeginDownloadTextFileDelegate = new BeginOperationDelegate(this.OnBeginDownloadTextFile);
            }
            if ((this.onEndDownloadTextFileDelegate == null)) {
                this.onEndDownloadTextFileDelegate = new EndOperationDelegate(this.OnEndDownloadTextFile);
            }
            if ((this.onDownloadTextFileCompletedDelegate == null)) {
                this.onDownloadTextFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadTextFileCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadTextFileDelegate, new object[] {
                        path,
                        fileName}, this.onEndDownloadTextFileDelegate, this.onDownloadTextFileCompletedDelegate, userState);
        }
        
        public bool UploadTextFile(string path, string fileName, byte[] fileContent) {
            return base.Channel.UploadTextFile(path, fileName, fileContent);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUploadTextFile(string path, string fileName, byte[] fileContent, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadTextFile(path, fileName, fileContent, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUploadTextFile(System.IAsyncResult result) {
            return base.Channel.EndUploadTextFile(result);
        }
        
        private System.IAsyncResult OnBeginUploadTextFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string path = ((string)(inValues[0]));
            string fileName = ((string)(inValues[1]));
            byte[] fileContent = ((byte[])(inValues[2]));
            return this.BeginUploadTextFile(path, fileName, fileContent, callback, asyncState);
        }
        
        private object[] OnEndUploadTextFile(System.IAsyncResult result) {
            bool retVal = this.EndUploadTextFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadTextFileCompleted(object state) {
            if ((this.UploadTextFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadTextFileCompleted(this, new UploadTextFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadTextFileAsync(string path, string fileName, byte[] fileContent) {
            this.UploadTextFileAsync(path, fileName, fileContent, null);
        }
        
        public void UploadTextFileAsync(string path, string fileName, byte[] fileContent, object userState) {
            if ((this.onBeginUploadTextFileDelegate == null)) {
                this.onBeginUploadTextFileDelegate = new BeginOperationDelegate(this.OnBeginUploadTextFile);
            }
            if ((this.onEndUploadTextFileDelegate == null)) {
                this.onEndUploadTextFileDelegate = new EndOperationDelegate(this.OnEndUploadTextFile);
            }
            if ((this.onUploadTextFileCompletedDelegate == null)) {
                this.onUploadTextFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadTextFileCompleted);
            }
            base.InvokeAsync(this.onBeginUploadTextFileDelegate, new object[] {
                        path,
                        fileName,
                        fileContent}, this.onEndUploadTextFileDelegate, this.onUploadTextFileCompletedDelegate, userState);
        }
        
        public bool DeleteFile(string path, string fileName) {
            return base.Channel.DeleteFile(path, fileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteFile(string path, string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFile(path, fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteFile(System.IAsyncResult result) {
            return base.Channel.EndDeleteFile(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string path = ((string)(inValues[0]));
            string fileName = ((string)(inValues[1]));
            return this.BeginDeleteFile(path, fileName, callback, asyncState);
        }
        
        private object[] OnEndDeleteFile(System.IAsyncResult result) {
            bool retVal = this.EndDeleteFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFileCompleted(object state) {
            if ((this.DeleteFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFileCompleted(this, new DeleteFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFileAsync(string path, string fileName) {
            this.DeleteFileAsync(path, fileName, null);
        }
        
        public void DeleteFileAsync(string path, string fileName, object userState) {
            if ((this.onBeginDeleteFileDelegate == null)) {
                this.onBeginDeleteFileDelegate = new BeginOperationDelegate(this.OnBeginDeleteFile);
            }
            if ((this.onEndDeleteFileDelegate == null)) {
                this.onEndDeleteFileDelegate = new EndOperationDelegate(this.OnEndDeleteFile);
            }
            if ((this.onDeleteFileCompletedDelegate == null)) {
                this.onDeleteFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFileCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFileDelegate, new object[] {
                        path,
                        fileName}, this.onEndDeleteFileDelegate, this.onDeleteFileCompletedDelegate, userState);
        }
        
        public bool SaveQRCode(string path, string fileName) {
            return base.Channel.SaveQRCode(path, fileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveQRCode(string path, string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveQRCode(path, fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSaveQRCode(System.IAsyncResult result) {
            return base.Channel.EndSaveQRCode(result);
        }
        
        private System.IAsyncResult OnBeginSaveQRCode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string path = ((string)(inValues[0]));
            string fileName = ((string)(inValues[1]));
            return this.BeginSaveQRCode(path, fileName, callback, asyncState);
        }
        
        private object[] OnEndSaveQRCode(System.IAsyncResult result) {
            bool retVal = this.EndSaveQRCode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveQRCodeCompleted(object state) {
            if ((this.SaveQRCodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveQRCodeCompleted(this, new SaveQRCodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveQRCodeAsync(string path, string fileName) {
            this.SaveQRCodeAsync(path, fileName, null);
        }
        
        public void SaveQRCodeAsync(string path, string fileName, object userState) {
            if ((this.onBeginSaveQRCodeDelegate == null)) {
                this.onBeginSaveQRCodeDelegate = new BeginOperationDelegate(this.OnBeginSaveQRCode);
            }
            if ((this.onEndSaveQRCodeDelegate == null)) {
                this.onEndSaveQRCodeDelegate = new EndOperationDelegate(this.OnEndSaveQRCode);
            }
            if ((this.onSaveQRCodeCompletedDelegate == null)) {
                this.onSaveQRCodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveQRCodeCompleted);
            }
            base.InvokeAsync(this.onBeginSaveQRCodeDelegate, new object[] {
                        path,
                        fileName}, this.onEndSaveQRCodeDelegate, this.onSaveQRCodeCompletedDelegate, userState);
        }
        
        public void Verify(string userName, string verificationCode) {
            base.Channel.Verify(userName, verificationCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginVerify(string userName, string verificationCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginVerify(userName, verificationCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndVerify(System.IAsyncResult result) {
            base.Channel.EndVerify(result);
        }
        
        private System.IAsyncResult OnBeginVerify(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string verificationCode = ((string)(inValues[1]));
            return this.BeginVerify(userName, verificationCode, callback, asyncState);
        }
        
        private object[] OnEndVerify(System.IAsyncResult result) {
            this.EndVerify(result);
            return null;
        }
        
        private void OnVerifyCompleted(object state) {
            if ((this.VerifyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VerifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VerifyAsync(string userName, string verificationCode) {
            this.VerifyAsync(userName, verificationCode, null);
        }
        
        public void VerifyAsync(string userName, string verificationCode, object userState) {
            if ((this.onBeginVerifyDelegate == null)) {
                this.onBeginVerifyDelegate = new BeginOperationDelegate(this.OnBeginVerify);
            }
            if ((this.onEndVerifyDelegate == null)) {
                this.onEndVerifyDelegate = new EndOperationDelegate(this.OnEndVerify);
            }
            if ((this.onVerifyCompletedDelegate == null)) {
                this.onVerifyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVerifyCompleted);
            }
            base.InvokeAsync(this.onBeginVerifyDelegate, new object[] {
                        userName,
                        verificationCode}, this.onEndVerifyDelegate, this.onVerifyCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> GetClientChcheModelTypeName() {
            return base.Channel.GetClientChcheModelTypeName();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetClientChcheModelTypeName(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientChcheModelTypeName(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<string> EndGetClientChcheModelTypeName(System.IAsyncResult result) {
            return base.Channel.EndGetClientChcheModelTypeName(result);
        }
        
        private System.IAsyncResult OnBeginGetClientChcheModelTypeName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetClientChcheModelTypeName(callback, asyncState);
        }
        
        private object[] OnEndGetClientChcheModelTypeName(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = this.EndGetClientChcheModelTypeName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientChcheModelTypeNameCompleted(object state) {
            if ((this.GetClientChcheModelTypeNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientChcheModelTypeNameCompleted(this, new GetClientChcheModelTypeNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientChcheModelTypeNameAsync() {
            this.GetClientChcheModelTypeNameAsync(null);
        }
        
        public void GetClientChcheModelTypeNameAsync(object userState) {
            if ((this.onBeginGetClientChcheModelTypeNameDelegate == null)) {
                this.onBeginGetClientChcheModelTypeNameDelegate = new BeginOperationDelegate(this.OnBeginGetClientChcheModelTypeName);
            }
            if ((this.onEndGetClientChcheModelTypeNameDelegate == null)) {
                this.onEndGetClientChcheModelTypeNameDelegate = new EndOperationDelegate(this.OnEndGetClientChcheModelTypeName);
            }
            if ((this.onGetClientChcheModelTypeNameCompletedDelegate == null)) {
                this.onGetClientChcheModelTypeNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientChcheModelTypeNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientChcheModelTypeNameDelegate, null, this.onEndGetClientChcheModelTypeNameDelegate, this.onGetClientChcheModelTypeNameCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> GetListAll(string modelType) {
            return base.Channel.GetListAll(modelType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetListAll(string modelType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetListAll(modelType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> EndGetListAll(System.IAsyncResult result) {
            return base.Channel.EndGetListAll(result);
        }
        
        private System.IAsyncResult OnBeginGetListAll(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string modelType = ((string)(inValues[0]));
            return this.BeginGetListAll(modelType, callback, asyncState);
        }
        
        private object[] OnEndGetListAll(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> retVal = this.EndGetListAll(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetListAllCompleted(object state) {
            if ((this.GetListAllCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetListAllCompleted(this, new GetListAllCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetListAllAsync(string modelType) {
            this.GetListAllAsync(modelType, null);
        }
        
        public void GetListAllAsync(string modelType, object userState) {
            if ((this.onBeginGetListAllDelegate == null)) {
                this.onBeginGetListAllDelegate = new BeginOperationDelegate(this.OnBeginGetListAll);
            }
            if ((this.onEndGetListAllDelegate == null)) {
                this.onEndGetListAllDelegate = new EndOperationDelegate(this.OnEndGetListAll);
            }
            if ((this.onGetListAllCompletedDelegate == null)) {
                this.onGetListAllCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetListAllCompleted);
            }
            base.InvokeAsync(this.onBeginGetListAllDelegate, new object[] {
                        modelType}, this.onEndGetListAllDelegate, this.onGetListAllCompletedDelegate, userState);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> GetList(string modelType, int startRid, int count) {
            return base.Channel.GetList(modelType, startRid, count);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetList(string modelType, int startRid, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetList(modelType, startRid, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> EndGetList(System.IAsyncResult result) {
            return base.Channel.EndGetList(result);
        }
        
        private System.IAsyncResult OnBeginGetList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string modelType = ((string)(inValues[0]));
            int startRid = ((int)(inValues[1]));
            int count = ((int)(inValues[2]));
            return this.BeginGetList(modelType, startRid, count, callback, asyncState);
        }
        
        private object[] OnEndGetList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ModelBase> retVal = this.EndGetList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetListCompleted(object state) {
            if ((this.GetListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetListCompleted(this, new GetListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetListAsync(string modelType, int startRid, int count) {
            this.GetListAsync(modelType, startRid, count, null);
        }
        
        public void GetListAsync(string modelType, int startRid, int count, object userState) {
            if ((this.onBeginGetListDelegate == null)) {
                this.onBeginGetListDelegate = new BeginOperationDelegate(this.OnBeginGetList);
            }
            if ((this.onEndGetListDelegate == null)) {
                this.onEndGetListDelegate = new EndOperationDelegate(this.OnEndGetList);
            }
            if ((this.onGetListCompletedDelegate == null)) {
                this.onGetListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetListCompleted);
            }
            base.InvokeAsync(this.onBeginGetListDelegate, new object[] {
                        modelType,
                        startRid,
                        count}, this.onEndGetListDelegate, this.onGetListCompletedDelegate, userState);
        }
        
        public bool Excute(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction> actions) {
            return base.Channel.Excute(actions);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExcute(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction> actions, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExcute(actions, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndExcute(System.IAsyncResult result) {
            return base.Channel.EndExcute(result);
        }
        
        private System.IAsyncResult OnBeginExcute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction> actions = ((System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction>)(inValues[0]));
            return this.BeginExcute(actions, callback, asyncState);
        }
        
        private object[] OnEndExcute(System.IAsyncResult result) {
            bool retVal = this.EndExcute(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExcuteCompleted(object state) {
            if ((this.ExcuteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExcuteCompleted(this, new ExcuteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExcuteAsync(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction> actions) {
            this.ExcuteAsync(actions, null);
        }
        
        public void ExcuteAsync(System.Collections.ObjectModel.ObservableCollection<TraceSystemWPF.Proxy.ExcuteAction> actions, object userState) {
            if ((this.onBeginExcuteDelegate == null)) {
                this.onBeginExcuteDelegate = new BeginOperationDelegate(this.OnBeginExcute);
            }
            if ((this.onEndExcuteDelegate == null)) {
                this.onEndExcuteDelegate = new EndOperationDelegate(this.OnEndExcute);
            }
            if ((this.onExcuteCompletedDelegate == null)) {
                this.onExcuteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExcuteCompleted);
            }
            base.InvokeAsync(this.onBeginExcuteDelegate, new object[] {
                        actions}, this.onEndExcuteDelegate, this.onExcuteCompletedDelegate, userState);
        }
        
        public int InsertModel(TraceSystemWPF.Proxy.ModelBase model) {
            return base.Channel.InsertModel(model);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertModel(TraceSystemWPF.Proxy.ModelBase model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertModel(model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndInsertModel(System.IAsyncResult result) {
            return base.Channel.EndInsertModel(result);
        }
        
        private System.IAsyncResult OnBeginInsertModel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TraceSystemWPF.Proxy.ModelBase model = ((TraceSystemWPF.Proxy.ModelBase)(inValues[0]));
            return this.BeginInsertModel(model, callback, asyncState);
        }
        
        private object[] OnEndInsertModel(System.IAsyncResult result) {
            int retVal = this.EndInsertModel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertModelCompleted(object state) {
            if ((this.InsertModelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertModelCompleted(this, new InsertModelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertModelAsync(TraceSystemWPF.Proxy.ModelBase model) {
            this.InsertModelAsync(model, null);
        }
        
        public void InsertModelAsync(TraceSystemWPF.Proxy.ModelBase model, object userState) {
            if ((this.onBeginInsertModelDelegate == null)) {
                this.onBeginInsertModelDelegate = new BeginOperationDelegate(this.OnBeginInsertModel);
            }
            if ((this.onEndInsertModelDelegate == null)) {
                this.onEndInsertModelDelegate = new EndOperationDelegate(this.OnEndInsertModel);
            }
            if ((this.onInsertModelCompletedDelegate == null)) {
                this.onInsertModelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertModelCompleted);
            }
            base.InvokeAsync(this.onBeginInsertModelDelegate, new object[] {
                        model}, this.onEndInsertModelDelegate, this.onInsertModelCompletedDelegate, userState);
        }
    }
}
